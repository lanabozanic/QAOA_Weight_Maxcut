{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import all necessary packages\n",
    "from typing import List, Tuple\n",
    "\n",
    "import networkx as nx\n",
    "import numpy as np\n",
    "import random\n",
    "from itertools import combinations\n",
    "\n",
    "from pyquil.api import get_qc\n",
    "from pyquil.paulis import PauliTerm, PauliSum\n",
    "from scipy.optimize import minimize\n",
    "from pyquil import get_qc, Program\n",
    "from grove.pyqaoa.qaoa import QAOA\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/networkx/drawing/nx_pylab.py:579: MatplotlibDeprecationWarning: \n",
      "The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead.\n",
      "  if not cb.iterable(width):\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#create the graph\n",
    "n = 4\n",
    "G = nx.Graph()\n",
    "\n",
    "for node in range(n):\n",
    "    G.add_node(node)\n",
    "\n",
    "for node in range(n):\n",
    "    G.add_node(node)\n",
    "\n",
    "#list of nodes with weighted edges\n",
    "elist = [(0, 1, 2), (0, 2, 5), (0, 3, 0.25), (1, 2, 3), (2, 3, 1.0), (1,3, 0.30)]\n",
    "G.add_weighted_edges_from(elist)\n",
    "\n",
    "\n",
    "#creates random graph every time you run it!\n",
    "for (u,v,w) in G.edges(data=True):\n",
    "    w['weight'] = random.randint(0,10)\n",
    "\n",
    "#plot maxcut problem\n",
    "pos = nx.spring_layout(G)\n",
    "nx.draw_networkx_edge_labels(G, pos, edge_labels={(0,1):2,\n",
    "(0, 2):5, (0,3):0.25, (1,2):3, (2,3):1.0, (1,3):0.3},font_color='red')\n",
    "\n",
    "nx.draw(G, with_labels = True, node_color = 'pink')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#find largest weight in list\n",
    "largest_weight = 0\n",
    "for edge in elist:\n",
    "    for i in range(len(elist)):\n",
    "        weight = elist[i][2]\n",
    "        if weight > largest_weight:\n",
    "            largest_weight = weight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def maxcut_qaoa(graph, steps=1, rand_seed=None, connection=None, samples=None,\n",
    "                initial_beta=None, initial_gamma=None, minimizer_kwargs=None,\n",
    "                vqe_option=None):\n",
    "    \n",
    "    if not isinstance(graph, nx.Graph) and isinstance(graph, list):\n",
    "        maxcut_graph = nx.Graph()\n",
    "        for edge in graph:\n",
    "            maxcut_graph.add_edge(*edge)\n",
    "        graph = maxcut_graph.copy()\n",
    "        nx.draw(graph)\n",
    "    \n",
    "    cost_operators = []\n",
    "    driver_operators = []\n",
    "    \n",
    "    #Creates cost hamiltonian from weights + nodes, adds accountability for weights from original rigetti QAOA code \n",
    "    for i, j in graph.edges():\n",
    "        weight = graph.get_edge_data(i,j)['weight']/largest_weight\n",
    "        cost_operators.append(PauliTerm(\"Z\", i, weight)*PauliTerm(\"Z\", j) + PauliTerm(\"I\", 0, -weight))\n",
    "    \n",
    "    #creates driver hamiltonian\n",
    "    for i in graph.nodes():\n",
    "        driver_operators.append(PauliSum([PauliTerm(\"X\", i, -1.0)]))\n",
    "\n",
    "    if connection is None:\n",
    "        connection = get_qc(f\"{len(graph.nodes)}q-qvm\")\n",
    "\n",
    "    if minimizer_kwargs is None:\n",
    "        minimizer_kwargs = {'method': 'Nelder-Mead',\n",
    "                            'options': {'ftol': 1.0e-2, 'xtol': 1.0e-2,\n",
    "                                        'disp': False}}\n",
    "    if vqe_option is None:\n",
    "        vqe_option = {'disp': print, 'return_all': True,\n",
    "                      'samples': samples}\n",
    "    \n",
    "    qaoa_inst = QAOA(connection, list(graph.nodes()), steps=steps, cost_ham=cost_operators,\n",
    "                     ref_ham=driver_operators, store_basis=True,\n",
    "                     rand_seed=rand_seed,\n",
    "                     init_betas=initial_beta,\n",
    "                     init_gammas=initial_gamma,\n",
    "                     minimizer=minimize,\n",
    "                     minimizer_kwargs=minimizer_kwargs,\n",
    "                     vqe_options=vqe_option)\n",
    "\n",
    "    return qaoa_inst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from pyquil import *\n",
    "import pyquil.api as QVMConnection\n",
    "\n",
    "qvm = api.QVMConnection()\n",
    "\n",
    "inst = maxcut_qaoa(G, steps=10, connection=qvm, rand_seed=None, samples=None, initial_beta=None, initial_gamma=None, minimizer_kwargs=None, vqe_option=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#run qaoa and find most frequent bitstring\n",
    "get_ipython().run_cell_magic('time', '', '\\nbetas, gammas = inst.get_angles()\\nprobs = inst.probabilities(np.hstack((betas, gammas)))\\nfor state, prob in zip(inst.states, probs):\\n    print(state, prob)\\n\\nprint(\"Most frequent bitstring from sampling\")\\nmost_freq_string, sampling_results = inst.get_string(betas, gammas)')\n",
    "\n",
    "print(most_freq_string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(most_freq_string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#turn 0s into pink nodes and 1s into blue nodes\n",
    "colours = []\n",
    "for i in range(n):\n",
    "    if most_freq_string[i] == 0:\n",
    "        colours.append('pink')\n",
    "    elif most_freq_string[i] == 1:\n",
    "        colours.append('blue')\n",
    "\n",
    "nx.draw(G, with_labels = True, node_color = colours)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
